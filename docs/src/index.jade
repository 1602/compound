!!! 5
html.style-dark
  head
    title CompoundJS - build apps with love
    link(rel="stylesheet", href="stylesheets/application.css")
    link(rel="stylesheet", href="stylesheets/prettify.css")
    link(href="http://fonts.googleapis.com/css?family=Quicksand:300", rel="stylesheet")

    script(src="http://code.jquery.com/jquery-1.7.1.min.js")
    script(src="javascripts/prettyprint.js")
    script(src="javascripts/application.js")
  body
    .sidebar
      .menu
      ul.items

    .content-wrapper
      img.logo(src="images/logo.png", alt="CompoundJS")

      .style-switch

      section(id="routing")
        h1 Routing

        p
          | The purpose of routes is to connect a URL with a controller action. For example, you can define the following route in 
          code config/routes.js
          |  to link 
          code GET /signup
          |  with 
          code new
          |  action of 
          code users
          |  controller:

        pre.prettyprint map.get('signup', 'users#new');

        p
          | The following route will link 
          code GET /
          |  to the 
          code index
          |  action of the
          code home
          |  controller:

        pre.prettyprint map.root('home#index');

      section(id="routing-resources")
        h2 Resource-based routing

        p Resource-based routing provides standard mapping between HTTP verbs and controller actions:

        pre.prettyprint map.resources('posts');

        p will provide the following routes:

        pre.prettyprint.
          &nbsp;&nbsp;helper | method | path                   | controller#action
              posts GET      /posts                   posts#index
              posts POST     /posts                   posts#create
          &nbsp;new_post GET      /posts/new               posts#new
          edit_post GET      /posts/:id/edit          posts#edit
               post DELETE   /posts/:id               posts#destroy
               post PUT      /posts/:id               posts#update
               post GET      /posts/:id               posts#show.

        p 
          | To list all available routes you can run the command 
          code compound routes
          | .

        p
          | The first column of the table represents the 
          code helper
          |  - you can use this identifier in views and controllers to get the route. Some examples:

        pre.prettyprint.
          path_to.new_post            # /posts/new
          path_to.edit_post(1)        # /posts/1/edit
          path_to.edit_post(post)     # /posts/1/edit (in this example post = {id: 1})
          path_to.posts               # /posts
          path_to.post(post)          # /posts/1.


      section(id="routing-resources-alias")
        h2 Aliases for resourceful routes

        p
          | If you want to override default routes behaviour, you can use two options: 
          code as
          |  and 
          code path
          |  to specify a helper name and a path you want to have in the result.

        section(id="routing-resources-alias-as")
          h3 { as: 'helperName' }

          p Path helper aliasing:

          pre.prettyprint map.resources('posts', { as: 'articles' });

          p This will create the following routes:

          pre.prettyprint.
            &nbsp;&nbsp;&nbsp;&nbsp;articles GET    /posts.:format?          posts#index
                articles POST   /posts.:format?          posts#create
            &nbsp;new_article GET    /posts/new.:format?      posts#new
            edit_article GET    /posts/:id/edit.:format? posts#edit
                 article DELETE /posts/:id.:format?      posts#destroy
                 article PUT    /posts/:id.:format?      posts#update
                 article GET    /posts/:id.:format?      posts#show.

        section(id="routing-resources-alias-path")
          h3 { path: 'alternatePath' }

          p If you want to change the base path:

          pre.prettyprint map.resources('posts', { path: 'articles' });

          p This will create the following routes:

          pre.prettyprint.
            &nbsp;&nbsp;&nbsp;&nbsp;posts GET    /articles.:format?          posts#index
                posts POST   /articles.:format?          posts#create
            &nbsp;new_post GET    /articles/new.:format?      posts#new
            edit_post GET    /articles/:id/edit.:format? posts#edit
                 post DELETE /articles/:id.:format?      posts#destroy
                 post PUT    /articles/:id.:format?      posts#update
                 post GET    /articles/:id.:format?      posts#show

        section(id="routing-resources-alias-both")
          h3 All together

          p If you want to alias both the helper and the path:

          pre.prettyprint map.resources('posts', { path: 'articles', as: 'stories' });

          p This will create the following routes:

          pre.prettyprint.
            &nbsp;&nbsp;&nbsp;stories GET    /articles.:format?          posts#index
               stories POST   /articles.:format?          posts#create
            &nbsp;new_story GET    /articles/new.:format?      posts#new
            edit_story GET    /articles/:id/edit.:format? posts#edit
                 story DELETE /articles/:id.:format?      posts#destroy
                 story PUT    /articles/:id.:format?      posts#update
                 story GET    /articles/:id.:format?      posts#show

      section(id="routing-nested-resources")
        h2 Nested resources

        p
          | Some resources may have nested sub-resources, for example 
          code Post
          |  has many 
          code Comments
          | , and of course we want to get a post's comments using 
          code GET /post/1/comments
          | .

        p Let's describe the route for our nested resource:

        pre.prettyprint.
          map.resources('post', function (post) {
            post.resources('comments');
          });.

        p This routing map will provide the following routes:

        pre.prettyprint.
          $ compound routes
               post_comments GET      /posts/:post_id/comments          comments#index
               post_comments POST     /posts/:post_id/comments          comments#create
          &nbsp;&nbsp;new_post_comment GET      /posts/:post_id/comments/new      comments#new
           edit_post_comment GET      /posts/:post_id/comments/:id/edit comments#edit
                post_comment DELETE   /posts/:post_id/comments/:id      comments#destroy
                post_comment PUT      /posts/:post_id/comments/:id      comments#update
                post_comment GET      /posts/:post_id/comments/:id      comments#show
                       posts GET      /posts                            posts#index
                       posts POST     /posts                            posts#create
                &nbsp;&nbsp;&nbsp;&nbsp;new_post GET      /posts/new                        posts#new
                   edit_post GET      /posts/:id/edit                   posts#edit
                        post DELETE   /posts/:id                        posts#destroy
                        post PUT      /posts/:id                        posts#update
                        post GET      /posts/:id                        posts#show.

        section(id="routing-url-helpers-nested")
          h3 Using url helpers for nested routes

          p
            | To use routes like 
            code post_comments
            |  you should call helper with param: parent resource or identifier before nested resource:

          pre.prettyprint.
            path_to.post_comments(post)               # /posts/1/comments
            path_to.edit_post_comment(post, comment)  # /posts/1/comments/10/edit
            path_to.edit_post_comment(2, 300)         # /posts/2/comments/300/edit

      section(id="routing-namespaces")
        h2 Namespaces

        p
          | You may wish to organize groups of controllers under a namespace. The most common use-case is an administration area. All controllers within the 
          code admin
          |  namespace should be located inside the 
          code app/controllers/
          |  directory.

        p For example, let's create an admin namespace:

        pre.prettyprint.
          map.namespace('admin', function (admin) {
            admin.resources('users');
          });

        p
          | This routing rule will match with 
          code /admin/users
          | , 
          code /admin/users/new
          |  and will create appropriate url helpers:

        pre.prettyprint.
          &nbsp;&nbsp;&nbsp;&nbsp;admin_users GET    /admin/users.:format?          admin/users#index
              admin_users POST   /admin/users.:format?          admin/users#create
          &nbsp;new_admin_user GET    /admin/users/new.:format?      admin/users#new
          edit_admin_user GET    /admin/users/:id/edit.:format? admin/users#edit
               admin_user DELETE /admin/users/:id.:format?      admin/users#destroy
               admin_user PUT    /admin/users/:id.:format?      admin/users#update
               admin_user GET    /admin/users/:id.:format?      admin/users#show

      section(id="restricting-routes")
        h2 Restricting routes

        p 
          | If you need routes only for several actions (e.g. 
          code index
          | , 
          code show
          | ), you can specify the 
          code only
          |  option:

        pre.prettyprint map.resources('users', { only: ['index', 'show'] });

        p 
          | If you want to have all routes except a specific route, you can specify the 
          code except
          |  option:

        pre.prettyprint map.resources('users', { except: ['create', 'destroy'] });

      section(id="routing-custom-actions")
        h2 Custom actions in resourceful routes

        p If you need some specific action to be added to your resource-based route, use this example:

        pre.prettyprint.
          map.resource('users', function (user) {
            user.get('avatar', 'users#avatar');
          });

      section(id="controllers")
        h1 Controllers

        p 
          | In CompoundJS, a controller is a module that receives user input and initiates a response. Controllers consists of a set of actions. Each action is called by the request of a particular route. To define an action, you should use the reserved global function 
          code action
          | .

      section(id="controllers-features")
        h2 Features overview

        p Inside controller you can use following reserved global functions to control response:

        ul
          li
            strong render
            |  - render view template related to this action
          li
            strong send
            |  - send text, status code or json object to client
          li
            strong redirect
            |  - redirect client to specific location
          li
            strong header
            |  - send header to client
          li
            strong flash
            |  - display flash message

        p And here is a bunch of functions to control execution flow:

        ul
          li
            strong before
            |  - invoke this method before any action
          li
            strong after
            |  - invoke this method after any action
          li
            strong load
            |  - load another controller to use its methods
          li
            strong use
            |  or 
            strong export
            |  - get method defined in another controller, loaded using 
            code load
          li
            strong publish
            |  or 
            strong import
            |  - allow method to be used in other controller

        p Let's learn more about each of this functions

      section(id="controllers-response-control")
        h2 Response control

        p
          strong NOTE: Each action should invoke exactly one output method. This is the only requirement imposed by the asynchronous nature of Node.js. If you don't call an output method, the client will infinitely wait for a server response.

      section(id="controllers-render")
        h3 render()

        p
          | The 
          code render
          |  method accepts 0, 1 or 2 arguments. When called without any arguments, it just renders the view associated with this action. For example, this will render 
          code app/views/posts/index.ejs
          | .

        code posts_controller.js

        pre.prettyprint.
          action('index', function () {
            render();
          });

        p If you want to pass some data to the view, there are two ways to do it. First is to simply pass a hash containing the data:

        pre.prettyprint.
          action('index', function () {
            render({ title: "Posts index" });
          });

        p 
          | and the second method is to set the properties of 
          code this
          | :

        pre.prettyprint.
          action('index', function () {
            this.title = "Posts index";
            render();
          });

        p And if you want to render another view, just put its name as the first argument:

        pre.prettyprint.
          action('update', function () {
            this.title = "Update post";
            render('edit');
          });

        p or:

        pre.prettyprint.
          action('update', function () {
            render('edit', { title: "Update post" });
          });

      section(id="controllers-send")
        h3 send()

        p
          | The 
          code send
          |  function is useful for debugging and one-page apps where you don't want to render a heavy template and just want to send text or JSON data.

        p This function can be called with number (status code):

        pre.prettyprint.
          action('destroy', function () {
            send(403); // client will receive statusCode = 403 Forbidden
          });

        p or with a string:

        pre.prettyprint.
          action('sayHello', function () {
            send('Hello!'); // client will receive 'Hello!'
          });

        p or with object:

        pre.prettyprint.
          action('apiCall', function () {
            send({ hello: 'world' }); // client will receive '{"hello":"world"}'
          });

      section(id="controllers-redirect")
        h3 redirect()

        p 
          | This function just sets the status code and 
          code Location
          |  header, so the client will be redirected to another location.


        pre.prettyprint.
          redirect('/'); // root redirection
          redirect('http://example.com'); // redirect to another host

      section(id="controller-flash")
        h3 flash()

        p 
          | The 
          code flash
          |  function stores a message in the session for future displaying, this is a regular expressjs function, refer to 
          a(href="http://expressjs.com/guide.html#req.flash()", target="_blank") expressjs guide
          |  to learn how it works. Few examples:

        code posts_controller.js

        pre.prettyprint.
          action('create', function () {
              Post.create(req.body, function (err) {
                  if (err) {
                      flash('error', 'Error while post creation');
                      render('new', {post: req.body});
                  } else {
                      flash('info', 'Post has been successfully created');
                      redirect(path_to.posts);
                  }
              });
          });

        p 
          | This 
          code create
          |  action sends a flash info on success and a flash error on fail.

      .section(id="controllers-execution-flow-control")
        h2 Execution flow control

        p To provide the ability of DRY-ing controller code and reusing common code parts, CompoundJS provides a few additional tools: method chaining and external controllers loading.

        p 
          | To chain methods, you can use the 
          code before
          |  and
          code after
          |  methods.

        code checkout_controller.js
        pre.prettyprint.
          before(userRequired, { only: 'order' });
          before(prepareBasket, { except: 'order' });
          before(loadProducts, { only: ['products', 'featuredProducts'] });

          action('products', function () { ... });
          action('featuredProducts', function () { ... });
          action('order', function () { ... });
          action('basket', function () { ... });

          function userRequired () { next() }
          function prepareBasket () { next() }
          function loadProducts () { next() }

        p
          | In this example, 
          code userRequired
          |  will be called only for the
          code order
          |  action, 
          code prepareBasket
          |  will be called for all actions except 
          code order
          | , and 
          code loadProducts
          |  will be called only for the 
          code products
          |  and 
          code featuredProducts
          | methods.


        p 
          | Note, that the before-functions should call the global 
          code next
          |  method that will pass control to the next function in the chain.

      .section(id="controllers-common-execution-context")
        h2 Common execution context

        p
          | There is one extra feature in flow control: All functions are invoked in the same context, so you can pass data between the functions using the 
          code this
          |  object:

        pre.prettyprint.
          function loadProducts () {
              Product.find(function (err, prds) {
                  this.products = prds;
                  next();
              }.bind(this));
          }

          action('products', function () {
              assert.ok(this.products, 'Products available here');
              render(); // also products will available in view
          });

      .section(id="controllers-sharing-code")
        h2 Sharing code across controllers

        p
          | Some methods, like 
          code userRequired
          |  for example, can be used in different controllers. To allow cross-controller code sharing, CompoundJS provides a few methods: 
          code load
          | , 
          code use
          |  and 
          code publish
          | .

        p
          | You can define 
          code requireUser
          |  in 
          code application_controller.js
          |  and call 
          code publish
          |  to make it accessible to all other controllers that inherit from this controller:

        code application_controller.js
        pre.prettyprint.
          publish('requireUser', requireUser);

          function requireUser () {
            // ...
          }

        code products_controller.js
        pre.prettyprint.
          load('application'); // note that _controller siffix omitted
          before(use('userRequired'), { only: 'products' });

      .section(id="controllers-other-expressjs")
        h2 Other express.js features

        p 
          | To get familiar with CompoundJS controllers, look at a few examples available at github: 
          a(href="https://github.com/anatoliychakkaev/railwayjs.com/blob/master/app/controllers/pages_controller.coffee", target="_blank") coffee controller
          | , 
          a(href="https://github.com/1602/router/blob/master/app/controllers/users_controller.js", target="_blank") javascript controller
          | .

        p 
          | All other expressjs features have no global shortcuts yet, but they can still be used since 
          code request
          |  (alias  
          code req
          | ) and 
          code response
          |  (alias 
          code res
          | ) are available as global variables inside the controller context. In the view context, they are available as 
          code request
          |  and 
          code response
          | .