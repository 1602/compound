#!/usr/bin/env node

var utils = require('../lib/railway_utils'),
    pluralize = utils.pluralize,
    camelize  = utils.camelize,
    $         = utils.stylize.$;

function createDir (dir) {
    var root = process.cwd();
    if (path.existsSync(root + '/' + dir)) {
        sys.puts($('exists').bold.grey + '  ' + dir);
    } else {
        fs.mkdirSync(root + '/' + dir, 0755);
        sys.puts($('create').bold.green + '  ' + dir);
    }
}

function createFile (filename, contents) {
    var root = process.cwd();
    if (path.existsSync(root + '/' + filename)) {
        sys.puts($('exists').bold.grey + '  ' + filename);
    } else {
        fs.writeFileSync(root + '/' + filename, contents);
        sys.puts($('create').bold.green + '  ' + filename);
    }
}

function createFileByTemplate (filename, template) {
    createFile(filename, fs.readFileSync(__dirname + '/../templates/' + template));
}

function createParents(ns, d) {
    ns.forEach(function (dir) {
        d += dir + '/';
        createDir(d);
    });
}

function formatType (name) {
    name = (name || 'string').toLowerCase();
    switch (name) {
    case 'string':   return 'String';

    case 'date':     return 'Date';

    case 'bool':
    case 'boolean':  return 'Boolean';

    case 'int':
    case 'real':
    case 'float':
    case 'decimal':
    case 'number':   return 'Number';
    }
    return '"' + name + '"';
}

var fs = require('fs');
var sys = require('sys');
var path = require('path');
var generators = {
    model: function (args) {
        var config = JSON.parse(fs.readFileSync(process.cwd() + '/config/database.json', 'utf-8'))[process.env.NODE_ENV || 'development'];
        var model = args.shift(), code = '';
        if (!model) { 
            sys.puts($('Model name required').red.bold);
            return;
        }
        var Model = model[0].toUpperCase() + model.slice(1);
        var attrs = [];
        args.forEach(function (arg) {
            var property = arg.split(':')[0],
                type = formatType(arg.split(':')[1]);

            if (config.driver == 'mongodb') {
                attrs.push(property + ': { type: ' + type + ' }');
            } else {
                attrs.push('    property("' + property + '", ' + type + ');');
            }
        });
        createDir('app/');
        createDir('app/models/');
        if (config.driver == 'mongodb') {
            code = 'var ' + Model + 'Schema = new Schema({\n    ' + attrs.join(',\n    ') + '\n});\n';
            code += 'var ' + Model + ' = mongoose.model("' + Model + '", ' + Model + 'Schema);\n';
            code += 'export(' + Model + ');';
        } else {
            code = 'var ' + Model + ' = describe("' + Model + '", function () {\n' +
                attrs.join('\n') + '\n});';
        }
        createFile('app/models/' + model + '.js', code);
    },
    controller: function (args) {
        var controller = args.shift();
        if (!controller) {
            sys.puts($('Controller name required').red.bold);
            return;
        }

        var ns = controller.split('/');
        ns.pop();

        var actions = [];
        args.forEach(function (action) {
            actions.push('action("' + action + '", function () {\n});');
        });

        createDir('app/');
        createDir('app/controllers/');
        createParents(ns, 'app/controllers/');

        // controller
        var filename = 'app/controllers/' + controller + '_controller.js';
        createFile(filename, actions.join('\n\n'));

        createDir('app/helpers/');
        createParents(ns, 'app/helpers/');

        // helper
        filename = 'app/helpers/' + controller + '_helper.js';
        createFile(filename, 'module.exports = {\n};');

        // views
        createDir('app/views/');
        createParents(ns, 'app/views/');
        createDir('app/views/' + controller + '/');
        args.forEach(function (action) {
            createFile('app/views/' + controller + '/' + action + '.ejs', '');
        });
    },
    features: function () {
        createDir('features/');
        createDir('features/step_definitions/');
        createFileByTemplate('features/step_definitions/web_steps.js', 'features/step_definitions/web_steps.js');
        createFileByTemplate('features/step_definitions/email_steps.js', 'features/step_definitions/email_steps.js');
        createFileByTemplate('features/step_definitions/jquery.js', 'features/step_definitions/jquery.js');
        try {
            require('cucumis');
        } catch (e) {
            sys.puts($('Cucumis is not installed').red + ' please run ' + $('npm install cucumis').yellow);
        }        Object.keys(models).forEach(function (name) {
            cname = name;
            var classDefinition = models[name];
            classDefinition.implementation();
            orm.mixPersistMethods(ctx[cname], {
                className:    classDefinition.className,
                tableName:    classDefinition.tableName,
                primaryKey:   classDefinition.primaryKey,
                properties:   classDefinition.properties,
                associations: classDefinition.associations,
                scopes:       classDefinition.scopes
            });
        });

    },
    crud: function (args) {
        var model = args[0];
        if (!model) {
            console.log('Usage example: railway g crud post title:string content:string published:boolean');
            return;
        }
        this.model.apply(this, Array.prototype.slice.call(arguments));
        createDir('app/');
        createDir('app/controllers/');
        createFile('app/controllers/' + pluralize(model).toLowerCase() + '_controller.js', controllerCode(model));

        function controllerCode(model) {
            var code = fs.readFileSync(__dirname + '/../templates/crud_controller.js')
                .toString()
                .replace(/models/g, pluralize(model).toLowerCase())
                .replace(/model/g, model.toLowerCase())
                .replace(/Model/g, camelize(model, true));
            return code;
        }

    }
};

var args = process.argv.slice(2);
switch (args.shift()) {
case 'c':
case 'console':
    var filename = process.cwd() + '/app.js';
    var ctx = require('repl').start('railway> ').context;

    ctx.reload = function () {
        global.models = {};
        if (path.existsSync(filename)) {
            app = require(filename, true);
        }
        ctx.app = app;

        for (var m in models) {
            ctx[m] = models[m];
        }
    };

    ctx.c = function () {
        var l = arguments.length,
            message = 'Callback called with ' + l +
                ' argument' + (l === 1 ? '' : 's') + (l > 0 ? ':\n' : '');

        for (var i = 0; i < 10; i++) {
            if (i < arguments.length) {
                ctx['_' + i] = arguments[i];
                message += '_' + i + ' = ' + arguments[i] + '\n ';
            } else {
                if (ctx.hasOwnProperty('_' + i)) {
                    delete ctx['_' + i];
                }
            }
        }
        console.log(message);
    };

    ctx.exit = function () {
        process.exit(0);
    };

    ctx.reload();

    break;

default:
case 'h':
case 'help':
    sys.puts('\nUsage: railway command [argument(s)]\n\n' +
    '  command is:\n' + 
    '    h or help        -- prints this message\n' +
    '    init             -- initialize railway directory structure\n' +
    '    generate [smth]  -- generate smth (model, controller, crud, features)\n\n');
    process.exit(0);
    break;

case 'init':
    [ 'app/',
      'app/models/',
      'app/controllers/',
      'app/helpers/',
      'app/views/',
      'app/views/layouts/',
      'config/',
      'config/initializers/',
      'public/',
      'public/stylesheets/',
      'public/javascripts/'
    ].forEach(createDir);
    createFile('config/routes.js', 'exports.routes = function (map) {\n};');
    createFileByTemplate('config/requirements.json', 'requirements.json');
    createFileByTemplate('Jakefile', 'tasks.js');
    createFileByTemplate('app/views/layouts/application_layout.ejs', 'layout.ejs');
    createFileByTemplate('public/stylesheets/reset.css', 'reset.css');
    createFileByTemplate('public/javascripts/rails.js', 'rails.js');

    // patch app.js
    var filename = process.cwd() + '/app.js';
    if (path.existsSync(filename)) {
        var app = fs.readFileSync(filename).toString();
        if (!app.match('express-on-railway')) {
            app = app
                .replace(/(\/\/ Only listen on \$ node app\.js)/, 'require("express-on-railway").init(__dirname, app);\n\n$1')
                .replace("app.set('views', __dirname + '/views');", "app.set('views', __dirname + '/app/views');");
            fs.writeFileSync(filename, app);
            sys.puts($('patch').bold.green + '   app.js');
        } else {
            sys.puts($('patched').bold.grey + ' app.js');
        }
    } else {
        sys.puts($('missing').bold.red + ' app.js');
    }
    process.exit(0);
    break;
case 'generate':
    var what = args.shift();
    if (generators[what]) {
        generators[what](args);
    }
    process.exit(0);
    break;
}
/*vim ft:javascript*/
